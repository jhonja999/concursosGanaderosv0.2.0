/// Archivo: schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------------------------
// ENUMERACIONES
// ---------------------------------------------------------

/// Sexo del ganado (solo MACHO/HEMBRA)
enum Sexo {
  MACHO
  HEMBRA
}

/// Estado de pedido (si usas parte e-commerce)
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

/// Rol de usuario
enum Role {
  USER
  ADMIN
}

// ---------------------------------------------------------
// MODELO DE USUARIO (opcional, si usas Clerk con un clerkId)
// ---------------------------------------------------------
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  nombre    String?
  email     String   @unique
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ejemplo: relaciones con reseñas, pedidos, wishlist, etc.
  reviews   Review[]
  orders    Order[]
  wishlist  Wishlist[]
  cart      CartItem[]

  // Si lo deseas, relación con Contact o Event
  Contact Contact[]
  Event   Event[]
}

// ---------------------------------------------------------
// MODELO DE COMPAÑÍA (EMPRESA)
// ---------------------------------------------------------
model Company {
  id          String    @id @default(cuid())
  nombre      String
  descripcion String?
  slug        String    @unique
  logo        String?
  isFeatured  Boolean   @default(false) // Destacar la empresa
  isPublished Boolean   @default(false) // Indica si la empresa está publicada
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relación con Concursos, Contactos, Eventos, etc.
  concursos Concurso[]
  contacts  Contact[]
  events    Event[]
  products  Product[]
}

// ---------------------------------------------------------
// MODELO DE CONCURSO
// ---------------------------------------------------------
model Concurso {
  id          String   @id @default(cuid())
  nombre      String
  descripcion String?
  fechaInicio DateTime
  fechaFin    DateTime?
  isFeatured  Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relación con la compañía
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relación N-N con Ganado
  ganadoEnConcurso GanadoEnConcurso[]
}


// ---------------------------------------------------------
// MODELO DE GANADO
// ---------------------------------------------------------
model Ganado {
  id           String   @id @default(cuid()) @map("_id")
  nombre       String
  fechaNac     DateTime?
  diasNacida   Int?
  categoria    String?
  subcategoria String?
  establo      String?
  remate       Boolean?
  propietario  String?      // O relacionarlo con Criador
  descripcion  String?
  raza         String?
  sexo         Sexo         // Enum: MACHO / HEMBRA
  numRegistro  String?      
  puntaje      Int?
  isFeatured   Boolean      @default(false)
  isPublished  Boolean      @default(false) // Si el ganado se muestra o no
  isGanadora   Boolean      @default(false) // Indica si fue ganadora
  premios      String[]     // Ej. ["Gran Campeón", "Mejor ubre"]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relación N-N con Concursos
  ganadoEnConcurso GanadoEnConcurso[]

  // Ejemplo: si quisieras relacionar con Criador
  propietarioId String?
  expositorId   String?

  // Si usas la tabla pivote GanadoImage
  GanadoImage GanadoImage[]
}

// Tabla pivote: Ganado <-> Concurso
model GanadoEnConcurso {
  id         String   @id @default(cuid())
  ganadoId   String
  concursoId String
  posicion   Int?
  creadoAt   DateTime @default(now())

  ganado     Ganado   @relation(fields: [ganadoId], references: [id])
  concurso   Concurso @relation(fields: [concursoId], references: [id])

  @@unique([ganadoId, concursoId])
  @@index([ganadoId])
  @@index([concursoId])
}

// ---------------------------------------------------------
// MODELO DE IMAGEN
// ---------------------------------------------------------
model Image {
  id        String   @id @default(cuid())
  url       String   @unique
  hash      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  GanadoImage GanadoImage[]
}

// Pivote para relacionar Ganado con múltiples imágenes
model GanadoImage {
  id         String @id @default(cuid())
  ganadoId   String
  imageId    String
  principal  Boolean @default(false)
  createdAt  DateTime @default(now())

  ganado Ganado @relation(fields: [ganadoId], references: [id], onDelete: Cascade)
  image  Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([ganadoId, imageId])
  @@index([ganadoId])
  @@index([imageId])
}

// ---------------------------------------------------------
// MODELO CONTACT (OPCIONAL)
// ---------------------------------------------------------
model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  role      String   @default("employee")
  startDate DateTime
  companyId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User    User[]  // varios users, si lo deseas

  @@index([companyId])
  @@index([userId])
}

// ---------------------------------------------------------
// MODELO EVENT (OPCIONAL)
// ---------------------------------------------------------
model Event {
  id          String   @id @default(cuid())
  companyId   String
  companyName String?
  title       String
  description String?
  start       DateTime
  allDay      Boolean
  timeFormat  String
  endDate     DateTime?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])
  User    User[]  // varios users, si deseas

  @@index([companyId])
}

// ---------------------------------------------------------
// MODELOS E-COMMERCE (SOLO SI LOS NECESITAS)
// ---------------------------------------------------------
model Category {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  description String?      @db.Text
  image       String?
  parentId    String?
  parent      Category?    @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")
  featured    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  Product Product[]
}

model Product {
  id           String      @id @default(cuid())
  name         String
  slug         String      @unique
  description  String?     @db.Text
  price        Float
  comparePrice Float?
  images       String[]
  videos       String[]
  ingredients  String?     @db.Text
  companyId    String
  categoryId   String
  variants     Variant[]
  attributes   Attribute[]
  reviews      Review[]
  orderItems   OrderItem[]
  wishlist     Wishlist[]
  cartItems    CartItem[]
  isFeatured   Boolean     @default(false)
  isPublished  Boolean     @default(false)
  stock        Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  company  Company  @relation(fields: [companyId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@index([companyId])
  @@index([categoryId])
}

model Variant {
  id        String   @id @default(cuid())
  name      String
  price     Float
  sku       String?
  stock     Int      @default(0)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Attribute {
  id        String   @id @default(cuid())
  name      String
  value     String
  imageUrl  String?
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}
